// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package sql

import (
	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  name, dob, description
) VALUES (
  $1, $2, $3
)
RETURNING id, name, dob, description, created_at
`

type CreateUserParams struct {
	Name        string
	Dob         pgtype.Date
	Description string
}

func (q *Conn) CreateUser(arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(q.ctx, createUser, arg.Name, arg.Dob, arg.Description)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Dob,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const createUserAddress = `-- name: CreateUserAddress :one
INSERT INTO user_address (
  user_id, address_line1, address_line2, city, state, postal_code, country
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
)
RETURNING id, user_id, address_line1, address_line2, city, state, postal_code, country, created_at
`

type CreateUserAddressParams struct {
	UserID       pgtype.UUID
	AddressLine1 string
	AddressLine2 pgtype.Text
	City         string
	State        string
	PostalCode   string
	Country      string
}

func (q *Conn) CreateUserAddress(arg CreateUserAddressParams) (UserAddress, error) {
	row := q.db.QueryRow(q.ctx, createUserAddress,
		arg.UserID,
		arg.AddressLine1,
		arg.AddressLine2,
		arg.City,
		arg.State,
		arg.PostalCode,
		arg.Country,
	)
	var i UserAddress
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AddressLine1,
		&i.AddressLine2,
		&i.City,
		&i.State,
		&i.PostalCode,
		&i.Country,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Conn) DeleteUser(id pgtype.UUID) error {
	_, err := q.db.Exec(q.ctx, deleteUser, id)
	return err
}

const deleteUserAddress = `-- name: DeleteUserAddress :exec
DELETE FROM user_address
WHERE id = $1
`

func (q *Conn) DeleteUserAddress(id pgtype.UUID) error {
	_, err := q.db.Exec(q.ctx, deleteUserAddress, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, name, dob, description, created_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Conn) GetUser(id pgtype.UUID) (User, error) {
	row := q.db.QueryRow(q.ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Dob,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const getUserAddress = `-- name: GetUserAddress :one
SELECT id, user_id, address_line1, address_line2, city, state, postal_code, country, created_at FROM user_address
WHERE id = $1 LIMIT 1
`

func (q *Conn) GetUserAddress(id pgtype.UUID) (UserAddress, error) {
	row := q.db.QueryRow(q.ctx, getUserAddress, id)
	var i UserAddress
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AddressLine1,
		&i.AddressLine2,
		&i.City,
		&i.State,
		&i.PostalCode,
		&i.Country,
		&i.CreatedAt,
	)
	return i, err
}

const listUserAddressByUser = `-- name: ListUserAddressByUser :many
SELECT id, user_id, address_line1, address_line2, city, state, postal_code, country, created_at FROM user_address
WHERE user_id = $1
ORDER BY city
`

func (q *Conn) ListUserAddressByUser(userID int32) ([]UserAddress, error) {
	rows, err := q.db.Query(q.ctx, listUserAddressByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserAddress
	for rows.Next() {
		var i UserAddress
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.AddressLine1,
			&i.AddressLine2,
			&i.City,
			&i.State,
			&i.PostalCode,
			&i.Country,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT id, name, dob, description, created_at FROM users
ORDER BY name
`

func (q *Conn) ListUsers() ([]User, error) {
	rows, err := q.db.Query(q.ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Dob,
			&i.Description,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET name = $2,
    dob = $3,
    description = $4
WHERE id = $1
`

type UpdateUserParams struct {
	ID          pgtype.UUID
	Name        string
	Dob         pgtype.Date
	Description string
}

func (q *Conn) UpdateUser(arg UpdateUserParams) error {
	_, err := q.db.Exec(q.ctx, updateUser,
		arg.ID,
		arg.Name,
		arg.Dob,
		arg.Description,
	)
	return err
}

const updateUserAddress = `-- name: UpdateUserAddress :exec
UPDATE user_address
SET address_line1 = $2,
    address_line2 = $3,
    city = $4,
    state = $5,
    postal_code = $6,
    country = $7
WHERE id = $1
`

type UpdateUserAddressParams struct {
	ID           pgtype.UUID
	AddressLine1 string
	AddressLine2 pgtype.Text
	City         string
	State        string
	PostalCode   string
	Country      string
}

func (q *Conn) UpdateUserAddress(arg UpdateUserAddressParams) error {
	_, err := q.db.Exec(q.ctx, updateUserAddress,
		arg.ID,
		arg.AddressLine1,
		arg.AddressLine2,
		arg.City,
		arg.State,
		arg.PostalCode,
		arg.Country,
	)
	return err
}
